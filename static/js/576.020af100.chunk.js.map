{"version":3,"file":"static/js/576.020af100.chunk.js","mappings":"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","sources":["webpack://suka/./src/components/Messages/Messages.module.css?8e7e","webpack://suka/./src/components/Messages/UserMessage/UserMessages.module.css?88b7","components/Messages/UserMessage/UserMessage.jsx","webpack://suka/./src/components/Messages/Users/Users.module.css?7c5f","components/Messages/Users/Users.jsx","webpack://suka/./src/components/Messages/SendText/SendText.module.css?cc42","components/Messages/SendText/SendText.jsx","components/Messages/Messages.jsx","redux/dialogs-selector.js","components/Messages/MessagesContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"repartition\":\"Messages_repartition__cUP+0\",\"dialogPeople\":\"Messages_dialogPeople__hrO0B\",\"dialogs\":\"Messages_dialogs__JnIFg\"};","// extracted by mini-css-extract-plugin\nexport default {\"myPfp\":\"UserMessages_myPfp__a-tPX\",\"theirPfp\":\"UserMessages_theirPfp__rqjY-\",\"fromMe\":\"UserMessages_fromMe__kq1GG\",\"fromThem\":\"UserMessages_fromThem__G8wLH\"};","import React from 'react';\nimport s from './UserMessages.module.css';\n\nconst UserMessage = ({\n  message: { from, text },\n  myPfp,\n  theirPfp,\n}) => {\n  let showMessages = () => {\n    if (from === 'me') {\n      return (\n        <div>\n          <div className={s.myPfp}>\n            <img src={myPfp} alt=\"me\" />\n          </div>\n          <div className={s.fromMe}>{text}</div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div className={s.theirPfp}>{theirPfp}</div>\n          <div className={s.fromThem}>{text}</div>\n        </div>\n      );\n    }\n  };\n\n  return <div>{showMessages()}</div>;\n};\n\nexport default UserMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogUser\":\"Users_dialogUser__Oe0QH\",\"username\":\"Users_username__ozrFd\",\"active\":\"Users_active__qmkhJ\",\"pfp\":\"Users_pfp__q9oKC\",\"messagesText\":\"Users_messagesText__Dx7nG\",\"overall\":\"Users_overall__68MI3\"};","import React, { memo } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Users.module.css';\n\nconst Users = ({ users }) => {\n  let userElements = users.map((e) => {\n    return (\n      <div className={s.dialogUser} key={e.id}>\n        <NavLink to={'/messages/' + e.id} className={s.pfp}>\n          {e.pfp}\n        </NavLink>\n        <NavLink\n          to={'/messages/' + e.id}\n          className={(navData) =>\n            navData.isActive ? s.active : s.username\n          }\n        >\n          {e.name[0] + ' ' + e.name[1]}\n        </NavLink>\n      </div>\n    );\n  });\n\n  return (\n    <div className={s.overall}>\n      <div className={s.messagesText}>Messages:</div>\n      <div className={s.userElements}>{userElements}</div>\n    </div>\n  );\n};\n\nexport default memo(Users);\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"SendText_button__awHXQ\",\"textArea\":\"SendText_textArea__V5Dqe\"};","import React from 'react';\nimport s from './SendText.module.css';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../../common/FormControls/FormControls';\n\nconst SendForm = ({ handleSubmit }) => {\n  return (\n    <form className={s.sendText} onSubmit={handleSubmit}>\n      <Field\n        className={s.textArea}\n        placeholder={'Enter your message'}\n        component={Textarea}\n        name={'send'}\n      />\n\n      <div>\n        <button className={s.button}>Send</button>\n      </div>\n    </form>\n  );\n};\n\nconst ReduxSendText = reduxForm({\n  form: 'login',\n})(SendForm);\n\nconst SendText = ({ send, id }) => {\n  const handleSubmit = (e) => {\n    send(id, e.send);\n    e.send = '';\n  };\n\n  return <ReduxSendText onSubmit={handleSubmit} />;\n};\n\nexport default SendText;\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport s from './Messages.module.css';\nimport UserMessage from './UserMessage/UserMessage';\nimport Users from './Users/Users';\nimport SendText from './SendText/SendText';\nimport placeholder from '../../assets/pfps/placeholder.jpg';\n\nconst Messages = ({\n  state: { userMessages, users },\n  memoryText,\n  send,\n  myData,\n}) => {\n  const userDialogElements = [];\n  for (let i = 0; i < userMessages.length; i++) {\n    userDialogElements[i] = userMessages[i].map((e) => {\n      return (\n        <div key={e.id}>\n          <UserMessage\n            message={e}\n            theirPfp={users[i].pfp}\n            myPfp={myData.photos.small || placeholder}\n          />\n        </div>\n      );\n    });\n  }\n\n  const routes = userDialogElements.map((e, i) => {\n    return (\n      <Route\n        exact\n        strict\n        path={'/' + (i + 1)}\n        key={i}\n        element={\n          <div className={s.dialog}>\n            {userDialogElements[i]}\n            <SendText memoryText={memoryText} send={send} id={i} />\n          </div>\n        }\n      />\n    );\n  });\n\n  return (\n    <div className={s.repartition}>\n      <div className={s.dialogPeople}>\n        <Users users={users} />\n      </div>\n      <div className={s.dialogs}>\n        <Routes>\n          <Route\n            exact\n            strict\n            path=\"/\"\n            element={\n              <div className={s.dialog}>\n                {userDialogElements[0]}\n                <SendText\n                  memoryText={memoryText}\n                  send={send}\n                  id={0}\n                />\n              </div>\n            }\n          />\n          {routes}\n        </Routes>\n      </div>\n    </div>\n  );\n};\n\nexport default Messages;\n","export const getStoredText = (state) => {\n  return state.dialogsPage.storedText;\n};\n\nexport const getDialogsPage = (state) => {\n  return state.dialogsPage;\n};\n\nexport const getMyPfp = (state) => {\n  return state.dialogsPage.myPfp;\n};\n","import { sendMessage } from '../../redux/dialogs-reducer';\nimport { connect } from 'react-redux';\nimport Messages from './Messages';\nimport React, { useEffect } from 'react';\nimport withAuthRedirect from '../../HOC/withAuthRedirect';\nimport { compose } from 'redux';\nimport {\n  getDialogsPage,\n  getStoredText,\n} from '../../redux/dialogs-selector';\nimport { getUID } from '../../redux/auth-selector';\nimport { getProfile } from '../../redux/profile-reducer';\nimport Loading from '../common/Loading/Loading';\nimport { getProfileData } from '../../redux/profile-selector';\n\nconst MessagesContainer = ({ uid, getProfile, ...props }) => {\n  useEffect(() => {\n    getProfile(uid);\n  });\n\n  if (!props.myData) return <Loading />;\n\n  return <Messages {...props} />;\n};\n\nlet mapStateToProps = (state) => {\n  return {\n    memoryText: getStoredText(state),\n    state: getDialogsPage(state),\n    uid: getUID(state),\n    myData: getProfileData(state),\n  };\n};\n\nexport default compose(\n  withAuthRedirect,\n  connect(mapStateToProps, {\n    send: sendMessage,\n    getProfile,\n  }),\n)(MessagesContainer);\n"],"names":["message","from","text","myPfp","theirPfp","className","s","src","alt","Users","userElements","users","map","e","to","id","pfp","navData","isActive","name","memo","ReduxSendText","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","send","state","userMessages","memoryText","myData","userDialogElements","i","photos","small","length","routes","exact","strict","path","element","getStoredText","dialogsPage","storedText","getDialogsPage","compose","withAuthRedirect","connect","uid","getUID","getProfileData","sendMessage","getProfile","props","useEffect","Loading"],"sourceRoot":""}