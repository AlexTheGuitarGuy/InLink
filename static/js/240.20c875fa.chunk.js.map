{"version":3,"file":"static/js/240.20c875fa.chunk.js","mappings":"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","sources":["../node_modules/redux-form/es/formValueSelector.js","../node_modules/redux-form/es/createFormValueSelector.js","components/Profile/ProfileInfo/ProfileInfoInput/JobInfo/JobInfo.jsx","components/Profile/ProfileInfo/ProfileInfoInput/Contacts/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoInput/ProfileInfoInput.jsx","utils/validators/validators.js"],"sourcesContent":["import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import invariant from 'invariant';\nimport plain from './structure/plain';\nexport default function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n}","import React from 'react';\nimport {\n  createField,\n  Input,\n  Textarea,\n} from '../../../../common/FormControls/FormControls';\n\nconst JobInfo = ({ maxLen, lookingForAJob }) => {\n  return (\n    <div\n      className=\"border rounded-lg border-gray-300\n                     bg-gray-200\n                     p-4 \n                     text-gray-700\n                     flex items-center flex-col\"\n    >\n      <div className=\"order-1\">\n        <div className=\"mr-1 mt-1 inline\">\n          {createField(\n            'isLookingForJob',\n            'lookingForAJob',\n            Input,\n            null,\n            'checkbox',\n          )}\n        </div>\n        is looking for a job\n      </div>\n\n      {lookingForAJob && (\n        <div className=\"order-2 mt-2\">\n          {createField(\n            'Please enter your skills...',\n            'lookingForAJobDescription',\n            Textarea,\n            [maxLen],\n            null,\n            { className: 'resize-none py-1 px-4 rounded' },\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JobInfo;\n","import React from 'react';\nimport {\n  createField,\n  Input,\n} from '../../../../common/FormControls/FormControls';\n\nconst Contacts = ({ contacts }) => {\n  const parsedContacts = Object.keys(contacts).map((key) => {\n    return (\n      <span key={key}>\n        <ContactField contactName={key} />\n      </span>\n    );\n  });\n\n  return (\n    <div className=\"mt-2 text-gray-700\">\n      Contacts:\n      <div className=\"ml-1\">{parsedContacts}</div>\n    </div>\n  );\n};\n\nconst ContactField = ({ contactName }) => {\n  return (\n    <div className=\"mt-1\">\n      <label htmlFor={contactName}>{contactName}:</label>\n      <span className=\"ml-2 text-gray-700\">\n        {createField(\n          'insert ' + contactName,\n          'contacts.' + contactName,\n          Input,\n          null,\n          null,\n          { className: 'p-1 rounded w-60', id: contactName },\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { memo } from 'react';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { maxLen } from '../../../../utils/validators/validators';\nimport placeholder from '../../../../assets/pfps/placeholder.jpg';\nimport Status from '../Status/Status';\nimport JobInfo from './JobInfo/JobInfo';\nimport Contacts from './Contacts/Contacts';\nimport { connect } from 'react-redux';\nimport Error from '../../../Error/Error';\nimport {\n  createField,\n  Input,\n} from '../../../common/FormControls/FormControls';\n\nlet ProfileInfoInputForm = ({\n  profileStatus,\n  pfp,\n  updateStatus,\n  isOwner,\n  uploadPFP,\n  handleSubmit,\n  profileData: { contacts },\n  error,\n  lookingForAJob,\n  maxLen1000,\n}) => {\n  const updatePFP = (e) => {\n    if (e.target.files.length) uploadPFP(e.target.files[0]);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div\n        className=\"flex justify-between\n      bg-gray-100 rounded-lg p-8\n    text-gray-700 font-semibold\"\n      >\n        {error && <Error text={'error'} />}\n\n        <div className=\"flex\">\n          <div>\n            <img\n              src={pfp || placeholder}\n              alt={'pfp'}\n              className=\"rounded-full w-52 bg-gray-700 p-1\"\n            />\n          </div>\n\n          <div className=\"mt-8 ml-4\">\n            <div className=\"text-2xl\">\n              {createField(\n                'Please insert your name...',\n                'fullName',\n                Input,\n                null,\n                null,\n                { className: 'p-2 rounded' },\n              )}\n            </div>\n\n            <div className=\"mt-2\">\n              <Status\n                status={profileStatus}\n                updateStatus={updateStatus}\n                isOwner={isOwner}\n              />\n            </div>\n\n            <div className=\"mt-4\">\n              <span\n                className=\"bg-gray-500 hover:bg-gray-600 active:bg-gray-700\n                          text-gray-100 text-center\n                          py-1.5 px-4 rounded\n                          transition-colors cursor-pointer\"\n              >\n                <button className=\"font-semibold\">Save</button>\n              </span>\n            </div>\n\n            <div className=\"mt-4\">\n              <div>Upload profile picture:</div>\n\n              <input\n                type={'file'}\n                onChange={updatePFP}\n                className=\"text-gray-700 font-semibold\n                          transition-colors cursor-pointer\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col w-96\">\n          <JobInfo\n            lookingForAJob={lookingForAJob}\n            maxLen={maxLen1000}\n          />\n\n          <Contacts contacts={contacts} />\n        </div>\n      </div>\n    </form>\n  );\n};\n\nProfileInfoInputForm = reduxForm({\n  form: 'profileInfo',\n})(ProfileInfoInputForm);\n\nconst selector = formValueSelector('profileInfo');\nProfileInfoInputForm = connect((state) => {\n  const lookingForAJob = selector(state, 'lookingForAJob');\n  return {\n    lookingForAJob,\n  };\n})(ProfileInfoInputForm);\n\nconst ProfileInfoInput = (props) => {\n  const maxLen50 = maxLen(50);\n  const maxLen1000 = maxLen(1000);\n\n  const onSubmit = (payload) => {\n    props.uploadProfileInfo(payload);\n  };\n\n  return (\n    <ProfileInfoInputForm\n      onSubmit={onSubmit}\n      {...props}\n      maxLen50={maxLen50}\n      maxLen1000={maxLen1000}\n      initialValues={props.profileData}\n    />\n  );\n};\n\nexport default memo(ProfileInfoInput);\n","export const required = (message) => {\n  if (message) return undefined;\n  return 'field is required';\n};\n\nexport const maxLen = (len) => (message) => {\n  if (message && message.length > len)\n    return `maximum length is ${len}`;\n  return undefined;\n};\n"],"names":["_ref","getIn","form","getFormState","invariant","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","maxLen","lookingForAJob","className","createField","Input","Textarea","ContactField","contactName","htmlFor","id","contacts","parsedContacts","Object","keys","map","key","ProfileInfoInputForm","profileStatus","pfp","updateStatus","isOwner","uploadPFP","handleSubmit","profileData","error","maxLen1000","onSubmit","Error","text","src","placeholder","alt","Status","status","type","onChange","e","target","files","reduxForm","selector","formValueSelector","connect","ProfileInfoInput","props","maxLen50","payload","uploadProfileInfo","initialValues","memo","required","message","len"],"sourceRoot":""}