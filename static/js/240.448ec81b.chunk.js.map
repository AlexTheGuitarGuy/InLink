{"version":3,"file":"static/js/240.448ec81b.chunk.js","mappings":"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","sources":["../node_modules/redux-form/es/formValueSelector.js","../node_modules/redux-form/es/createFormValueSelector.js","components/Profile/ProfileInfo/ProfileInfoInput/JobInfo/JobInfo.jsx","components/Profile/ProfileInfo/ProfileInfoInput/Contacts/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoInput/ProfileInfoInput.jsx","utils/validators/validators.js"],"sourcesContent":["import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import invariant from 'invariant';\nimport plain from './structure/plain';\nexport default function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n}","import React from 'react';\nimport {\n  createField,\n  Input,\n  Textarea,\n} from '../../../../common/FormControls/FormControls';\n\nconst JobInfo = ({ maxLen, lookingForAJob }) => {\n  return (\n    <div\n      className={`border-2 border-slate-800 \n                         rounded bg-slate-600 \n                         p-2 mt-2 text-white`}\n    >\n      <span className={'content flex justify-center mr-5'}>\n        <span className={'mr-2'}>\n          {createField(\n            'isLookingForJob',\n            'lookingForAJob',\n            Input,\n            null,\n            'checkbox',\n          )}\n        </span>\n        is looking for a job\n      </span>\n\n      {lookingForAJob && (\n        <div\n          className={\n            'flex flex-col justify-center items-center text-black mt-2'\n          }\n        >\n          {createField(\n            'Please enter your skills...',\n            'lookingForAJobDescription',\n            Textarea,\n            [maxLen],\n            null,\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JobInfo;\n","import React from 'react';\nimport {\n  createField,\n  Input,\n} from '../../../../common/FormControls/FormControls';\nimport cn from 'classnames';\n\nconst Contacts = ({ contacts, errorLocation }) => {\n  const parsedContacts = Object.keys(contacts).map((key) => {\n    return (\n      <span key={key}>\n        <ContactField\n          contactName={key}\n          errorLocation={errorLocation}\n        />\n      </span>\n    );\n  });\n\n  return (\n    <span className={'mt-1 text-white'}>\n      Contacts:\n      <div className={'ml-1'}>{parsedContacts}</div>\n    </span>\n  );\n};\n\nconst ContactField = ({ contactName, errorLocation }) => {\n  return (\n    <div className={'mt-1'}>\n      {contactName}:\n      <span\n        className={cn('ml-1 text-black', {\n          'border-2 border-rose-600':\n            errorLocation ===\n            `Contacts->${\n              contactName.charAt(0).toUpperCase() +\n              contactName.slice(1)\n            }`,\n        })}\n      >\n        {createField(\n          'insert ' + contactName,\n          'contacts.' + contactName,\n          Input,\n          null,\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { memo } from 'react';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { maxLen } from '../../../../utils/validators/validators';\nimport {\n  createField,\n  Input,\n} from '../../../common/FormControls/FormControls';\nimport s from '../ProfileInfoText/ProfileInfoText.module.css';\nimport placeholder from '../../../../assets/pfps/placeholder.jpg';\nimport Status from '../Status/Status';\nimport banner from '../../../../assets/banner.jfif';\nimport JobInfo from './JobInfo/JobInfo';\nimport Contacts from './Contacts/Contacts';\nimport e from '../../../common/FormControls/FormControls.module.css';\nimport { connect } from 'react-redux';\n\nlet ProfileInfoInputForm = ({\n  profileStatus,\n  pfp,\n  updateStatus,\n  isOwner,\n  uploadPFP,\n  handleSubmit,\n  profileData: { contacts },\n  error,\n  lookingForAJob,\n  maxLen1000,\n}) => {\n  const updatePFP = (e) => {\n    if (e.target.files.length) uploadPFP(e.target.files[0]);\n  };\n\n  const regExp = /\\(([^)]+)\\)/;\n  const errorLocation =\n    error && regExp.exec(error) && regExp.exec(error)[1];\n  const errorText = error && error.slice(0, error.indexOf('(') + 1);\n  if (errorLocation) console.log(errorLocation);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <img src={banner} alt=\"banner\" className={s.banner} />\n      {error && <div className={e.summaryError}>{errorText}</div>}\n\n      <div className={s.pfpAndDetails}>\n        <div className={s.pfp}>\n          <img src={pfp || placeholder} alt={'pfp'} />\n        </div>\n\n        <span className={s.jobInfo}>\n          <span className={'grid'}>\n            {isOwner ? <button>Save</button> : null}\n          </span>\n\n          <input type={'file'} onChange={updatePFP} />\n\n          <JobInfo\n            lookingForAJob={lookingForAJob}\n            maxLen={maxLen1000}\n          />\n        </span>\n\n        <div className={s.details}>\n          <span className={s.username}>\n            <span\n              className={\n                'flex flex-col justify-center items-center text-black'\n              }\n            >\n              {createField(\n                'Please insert your name...',\n                'fullName',\n                Input,\n                null,\n                null,\n              )}\n            </span>\n          </span>\n\n          <span className={s.status}>\n            <Status\n              status={profileStatus}\n              updateStatus={updateStatus}\n              isOwner={isOwner}\n            />\n          </span>\n\n          <span className={s.contacts}>\n            <Contacts\n              contacts={contacts}\n              errorLocation={errorLocation}\n            />\n          </span>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nProfileInfoInputForm = reduxForm({\n  form: 'profileInfo',\n})(ProfileInfoInputForm);\n\nconst selector = formValueSelector('profileInfo');\nProfileInfoInputForm = connect((state) => {\n  const lookingForAJob = selector(state, 'lookingForAJob');\n  return {\n    lookingForAJob,\n  };\n})(ProfileInfoInputForm);\n\nconst ProfileInfoInput = (props) => {\n  const maxLen50 = maxLen(50);\n  const maxLen1000 = maxLen(1000);\n\n  const onSubmit = (payload) => {\n    props\n      .uploadProfileInfo(payload)\n      .then((e) => e === 0 && props.setEditing(false));\n  };\n\n  return (\n    <ProfileInfoInputForm\n      onSubmit={onSubmit}\n      {...props}\n      maxLen50={maxLen50}\n      maxLen1000={maxLen1000}\n      initialValues={props.profileData}\n    />\n  );\n};\n\nexport default memo(ProfileInfoInput);\n","export const required = (message) => {\n  if (message) return undefined;\n  return 'field is required';\n};\n\nexport const maxLen = (len) => (message) => {\n  if (message && message.length > len)\n    return `maximum length is ${len}`;\n  return undefined;\n};\n"],"names":["_ref","getIn","form","getFormState","invariant","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","maxLen","lookingForAJob","className","createField","Input","Textarea","ContactField","contactName","errorLocation","cn","charAt","toUpperCase","slice","contacts","parsedContacts","Object","keys","map","key","ProfileInfoInputForm","profileStatus","pfp","updateStatus","isOwner","uploadPFP","handleSubmit","profileData","error","maxLen1000","regExp","exec","errorText","indexOf","console","log","onSubmit","src","banner","alt","s","e","placeholder","type","onChange","target","files","Status","status","reduxForm","selector","formValueSelector","connect","ProfileInfoInput","props","maxLen50","payload","uploadProfileInfo","then","setEditing","initialValues","memo","required","message","len"],"sourceRoot":""}