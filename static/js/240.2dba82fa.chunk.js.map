{"version":3,"file":"static/js/240.2dba82fa.chunk.js","mappings":"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","sources":["../node_modules/redux-form/es/formValueSelector.js","../node_modules/redux-form/es/createFormValueSelector.js","components/Profile/ProfileInfo/ProfileInfoInput/JobInfo/JobInfo.jsx","components/Profile/ProfileInfo/ProfileInfoInput/Contacts/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoInput/ProfileInfoInput.jsx","utils/validators/validators.js"],"sourcesContent":["import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import invariant from 'invariant';\nimport plain from './structure/plain';\nexport default function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n}","import React from 'react';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from '../../../../common/FormControls/FormControls';\r\n\r\nconst JobInfo = ({ maxLen, lookingForAJob }) => {\r\n  return (\r\n    <div\r\n      className=\"border rounded-lg border-gray-300\r\n                     bg-gray-200\r\n                     p-4 \r\n                     text-gray-700\r\n                     flex items-center flex-col\"\r\n    >\r\n      <div className=\"order-1\">\r\n        <div className=\"mr-1 mt-1 inline\">\r\n          {createField(\r\n            'isLookingForJob',\r\n            'lookingForAJob',\r\n            Input,\r\n            null,\r\n            'checkbox',\r\n          )}\r\n        </div>\r\n        is looking for a job\r\n      </div>\r\n\r\n      {lookingForAJob && (\r\n        <div className=\"order-2 mt-2\">\r\n          {createField(\r\n            'Please enter your skills...',\r\n            'lookingForAJobDescription',\r\n            Textarea,\r\n            [maxLen],\r\n            null,\r\n            { className: 'resize-none py-1 px-4 rounded' },\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobInfo;\r\n","import React from 'react';\r\nimport {\r\n  createField,\r\n  Input,\r\n} from '../../../../common/FormControls/FormControls';\r\n\r\nconst Contacts = ({ contacts }) => {\r\n  const parsedContacts = Object.keys(contacts).map((key) => {\r\n    return (\r\n      <span key={key}>\r\n        <ContactField contactName={key} />\r\n      </span>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"mt-2 text-gray-700\">\r\n      Contacts:\r\n      <div className=\"ml-1\">{parsedContacts}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ContactField = ({ contactName }) => {\r\n  return (\r\n    <div className=\"mt-1\">\r\n      <label htmlFor={contactName}>{contactName}:</label>\r\n      <span className=\"ml-2 text-gray-700\">\r\n        {createField(\r\n          'insert ' + contactName,\r\n          'contacts.' + contactName,\r\n          Input,\r\n          null,\r\n          null,\r\n          { className: 'p-1 rounded w-60', id: contactName },\r\n        )}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React, { memo } from 'react';\r\nimport { formValueSelector, reduxForm } from 'redux-form';\r\nimport { maxLen } from '../../../../utils/validators/validators';\r\nimport placeholder from '../../../../assets/pfps/placeholder.jpg';\r\nimport Status from '../Status/Status';\r\nimport JobInfo from './JobInfo/JobInfo';\r\nimport Contacts from './Contacts/Contacts';\r\nimport { connect } from 'react-redux';\r\nimport Error from '../../../Error/Error';\r\nimport {\r\n  createField,\r\n  Input,\r\n} from '../../../common/FormControls/FormControls';\r\n\r\nlet ProfileInfoInputForm = ({\r\n  profileStatus,\r\n  pfp,\r\n  updateStatus,\r\n  isOwner,\r\n  uploadPFP,\r\n  handleSubmit,\r\n  profileData: { contacts },\r\n  error,\r\n  lookingForAJob,\r\n  maxLen1000,\r\n}) => {\r\n  const updatePFP = (e) => {\r\n    if (e.target.files.length) uploadPFP(e.target.files[0]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div\r\n        className=\"flex justify-between\r\n      bg-gray-100 rounded-lg p-8\r\n    text-gray-700 font-semibold\"\r\n      >\r\n        {error && <Error text={'error'} />}\r\n\r\n        <div className=\"flex\">\r\n          <div>\r\n            <img\r\n              src={pfp || placeholder}\r\n              alt={'pfp'}\r\n              className=\"rounded-full w-52 bg-gray-700 p-1\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mt-8 ml-4\">\r\n            <div className=\"text-2xl\">\r\n              {createField(\r\n                'Please insert your name...',\r\n                'fullName',\r\n                Input,\r\n                null,\r\n                null,\r\n                { className: 'p-2 rounded' },\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"mt-2\">\r\n              <Status\r\n                status={profileStatus}\r\n                updateStatus={updateStatus}\r\n                isOwner={isOwner}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"mt-4\">\r\n              <span\r\n                className=\"bg-gray-500 hover:bg-gray-600 active:bg-gray-700\r\n                          text-gray-100 text-center\r\n                          py-1.5 px-4 rounded\r\n                          transition-colors cursor-pointer\"\r\n              >\r\n                <button className=\"font-semibold\">Save</button>\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"mt-4\">\r\n              <div>Upload profile picture:</div>\r\n\r\n              <input\r\n                type={'file'}\r\n                onChange={updatePFP}\r\n                className=\"text-gray-700 font-semibold\r\n                          transition-colors cursor-pointer\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-col w-96\">\r\n          <JobInfo\r\n            lookingForAJob={lookingForAJob}\r\n            maxLen={maxLen1000}\r\n          />\r\n\r\n          <Contacts contacts={contacts} />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nProfileInfoInputForm = reduxForm({\r\n  form: 'profileInfo',\r\n})(ProfileInfoInputForm);\r\n\r\nconst selector = formValueSelector('profileInfo');\r\nProfileInfoInputForm = connect((state) => {\r\n  const lookingForAJob = selector(state, 'lookingForAJob');\r\n  return {\r\n    lookingForAJob,\r\n  };\r\n})(ProfileInfoInputForm);\r\n\r\nconst ProfileInfoInput = (props) => {\r\n  const maxLen50 = maxLen(50);\r\n  const maxLen1000 = maxLen(1000);\r\n\r\n  const onSubmit = (payload) => {\r\n    props.uploadProfileInfo(payload);\r\n  };\r\n\r\n  return (\r\n    <ProfileInfoInputForm\r\n      onSubmit={onSubmit}\r\n      {...props}\r\n      maxLen50={maxLen50}\r\n      maxLen1000={maxLen1000}\r\n      initialValues={props.profileData}\r\n    />\r\n  );\r\n};\r\n\r\nexport default memo(ProfileInfoInput);\r\n","export const required = (message) => {\n  if (message) return undefined;\n  return 'field is required';\n};\n\nexport const maxLen = (len) => (message) => {\n  if (message && message.length > len)\n    return `maximum length is ${len}`;\n  return undefined;\n};\n"],"names":["_ref","getIn","form","getFormState","invariant","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","maxLen","lookingForAJob","className","createField","Input","Textarea","ContactField","contactName","htmlFor","id","contacts","parsedContacts","Object","keys","map","key","ProfileInfoInputForm","profileStatus","pfp","updateStatus","isOwner","uploadPFP","handleSubmit","profileData","error","maxLen1000","onSubmit","Error","text","src","placeholder","alt","Status","status","type","onChange","e","target","files","reduxForm","selector","formValueSelector","connect","ProfileInfoInput","props","maxLen50","payload","uploadProfileInfo","initialValues","memo","required","message","len"],"sourceRoot":""}