{"version":3,"file":"static/js/797.b1b6c121.chunk.js","mappings":"gMAYIA,EAAY,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACvC,OACE,oBAASC,UAAU,oBAAnB,UACE,gBAAKA,UAAU,8BAAf,UACE,iBAAKA,UAAU,kEAAf,WACE,gBAAKA,UAAU,oCAAf,UACE,gBACEC,IAAI,mFACJD,UAAU,SACVE,IAAI,aAGR,iBAAKF,UAAU,+BAAf,WACE,gBAAKA,UAAU,2CAAf,8BAGA,kBAAMG,SAAUN,EAAcG,UAAU,UAAxC,WACE,gBAAKA,UAAU,OAAf,UACGI,EAAAA,EAAAA,IACC,gBACA,QACAC,EAAAA,GACA,CAACC,EAAAA,EAAUR,GACX,KACA,CACEE,UAAU,yZAahB,gBAAKA,UAAU,OAAf,UACGI,EAAAA,EAAAA,IACC,WACA,WACAC,EAAAA,GACA,CAACC,EAAAA,EAAUR,GACX,WACA,CACEE,UAAU,qYAYhB,gBAAKA,UAAU,yCAAf,UACE,iBAAKA,UAAU,wBAAf,WACGI,EAAAA,EAAAA,IACC,aACA,aACAC,EAAAA,GACA,KACA,WACA,CACEL,UAAU,kLAIVO,GAAG,kBAGP,kBACEP,UAAU,6DACVQ,QAAQ,eAFV,+BASJ,mBACEC,KAAK,SACLT,UAAU,gSAUV,kBAAgB,OAChB,wBAAsB,QAbxB,sBAkBA,iBAAKA,UAAU,qBAAf,wCAEE,uDAAqC,KACrC,+CAGDD,IACC,gBAAKC,UAAU,sBAAf,UACE,iBAAKA,UAAU,qBAAf,WACE,gBACEC,IAAKF,EACLG,IAAI,UACJF,UAAU,iBAEXI,EAAAA,EAAAA,IACC,UACA,UACAC,EAAAA,GACA,CAACC,EAAAA,EAAUR,GACX,KACA,CACEE,UAAU,yaAsBlCJ,GAAYc,EAAAA,EAAAA,GAAU,CACpBC,KAAM,SADID,CAETd,GAyBH,WAAegB,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KALC,SAACC,GAAD,MAAY,CAClCC,WAAYD,EAAME,KAAKD,WACvBhB,QAASe,EAAME,KAAKC,cAG0B,CAAEC,MAAAA,EAAAA,KAAlD,EAvBc,SAAC,GAAoC,IAAlCH,EAAiC,EAAjCA,WAAYG,EAAqB,EAArBA,MAAOnB,EAAc,EAAdA,QAClC,GAAIgB,EAAY,OAAO,SAAC,KAAD,CAAUI,GAAI,aAErC,IAAMC,GAAWtB,EAAAA,EAAAA,GAAO,IAMxB,OACE,SAACF,EAAD,CACEE,OAAQsB,EACRjB,SAPa,SAAC,GAA8C,IAA5CkB,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,WAAYxB,EAAc,EAAdA,QAC/CmB,EAAMG,EAAOC,EAAUC,EAAYxB,IAOjCA,QAASA,Q,4EC7KR,IAAMO,EAAW,SAACkB,GACvB,IAAIA,EACJ,MAAO,qBAGI1B,EAAS,SAAC2B,GAAD,OAAS,SAACD,GAC9B,GAAIA,GAAWA,EAAQE,OAASD,EAC9B,MAAM,qBAAN,OAA4BA","sources":["components/Login/Login.jsx","utils/validators/validators.js"],"sourcesContent":["import React from 'react';\nimport { reduxForm } from 'redux-form';\nimport { maxLen, required } from '../../utils/validators/validators';\nimport {\n  createField,\n  Input,\n} from '../common/FormControls/FormControls';\nimport { connect } from 'react-redux';\nimport { login } from '../../redux/auth-reducer';\nimport { Navigate } from 'react-router-dom';\nimport { compose } from 'redux';\n\nlet LoginForm = ({ handleSubmit, maxLen, captcha }) => {\n  return (\n    <section className=\"h-screen relative\">\n      <div className=\"container px-6 py-12 h-full\">\n        <div className=\"flex justify-center items-center flex-wrap h-full text-gray-700\">\n          <div className=\"md:w-8/12 lg:w-6/12 mb-12 md:mb-0\">\n            <img\n              src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.svg\"\n              className=\"w-full\"\n              alt=\"Phone\"\n            />\n          </div>\n          <div className=\"md:w-8/12 lg:w-5/12 lg:ml-20\">\n            <div className=\"text-gray-700 font-bold text-center mb-6\">\n              Log into InLink\n            </div>\n            <form onSubmit={handleSubmit} className=\"text-xl\">\n              <div className=\"mb-6\">\n                {createField(\n                  'Email address',\n                  'email',\n                  Input,\n                  [required, maxLen],\n                  null,\n                  {\n                    className: `form-control block w-full\n                    px-4 py-2 m-0\n                    font-normal text-gray-700\n                    bg-white bg-clip-padding\n                    border border-solid border-gray-300 rounded\n                    transition ease-in-out\n                    focus:text-gray-800\n                    focus:bg-white focus:border-gray-600\n                    focus:outline-none`,\n                  },\n                )}\n              </div>\n\n              <div className=\"mb-6\">\n                {createField(\n                  'Password',\n                  'password',\n                  Input,\n                  [required, maxLen],\n                  'password',\n                  {\n                    className: `form-control block w-full\n                    px-4 py-2  m-0\n                    font-normal text-gray-700\n                    bg-white bg-clip-padding\n                    border border-solid border-gray-300 rounded\n                    transition ease-in-out\n                    focus:text-gray-800 focus:bg-white focus:border-gray-600\n                    focus:outline-none`,\n                  },\n                )}\n              </div>\n\n              <div className=\"flex justify-between items-center mb-6\">\n                <div className=\"form-group form-check\">\n                  {createField(\n                    'RememberMe',\n                    'rememberMe',\n                    Input,\n                    null,\n                    'checkbox',\n                    {\n                      className: `h-4 w-4 mt-1 mr-2 align-top float-left\n                      border border-gray-300\n                      rounded-sm\n                      focus:outline-none cursor-pointer`,\n                      id: `exampleCheck`,\n                    },\n                  )}\n                  <label\n                    className=\"form-check-label inline-block text-gray-800 cursor-pointer\"\n                    htmlFor=\"exampleCheck\"\n                  >\n                    Remember me\n                  </label>\n                </div>\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"inline-block\n                px-7 py-3\n                bg-gray-600\n                text-white font-medium text-sm leading-snug uppercase\n                rounded shadow-md\n                hover:bg-gray-700 hover:shadow-lg\n                focus:bg-gray-700 focus:shadow-lg\n                focus:outline-none focus:ring-0\n                active:bg-gray-800 active:shadow-lg\n                transition duration-150 ease-in-out w-full\"\n                data-mdb-ripple=\"true\"\n                data-mdb-ripple-color=\"light\"\n              >\n                Sign in\n              </button>\n\n              <div className=\"text-gray-700 mt-6\">\n                Free account for visitors:\n                <div>Email: free@samuraijs.com</div>{' '}\n                <div>Password: free</div>\n              </div>\n\n              {captcha && (\n                <div className=\"flex justify-center\">\n                  <div className=\"mt-6 text-gray-700\">\n                    <img\n                      src={captcha}\n                      alt=\"captcha\"\n                      className=\"mb-4 w-full\"\n                    />\n                    {createField(\n                      'Captcha',\n                      'captcha',\n                      Input,\n                      [required, maxLen],\n                      null,\n                      {\n                        className: `form-control block w-full\n                    px-4 py-2 m-0\n                    font-normal text-gray-700\n                    bg-white bg-clip-padding\n                    border border-solid border-gray-300 rounded\n                    transition ease-in-out\n                    focus:text-gray-800\n                    focus:bg-white focus:border-gray-600\n                    focus:outline-none`,\n                      },\n                    )}\n                  </div>\n                </div>\n              )}\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nLoginForm = reduxForm({\n  form: 'login',\n})(LoginForm);\n\nconst Login = ({ isLoggedIn, login, captcha }) => {\n  if (isLoggedIn) return <Navigate to={'/profile'} />;\n\n  const maxLen40 = maxLen(40);\n\n  const onSubmit = ({ email, password, rememberMe, captcha }) => {\n    login(email, password, rememberMe, captcha);\n  };\n\n  return (\n    <LoginForm\n      maxLen={maxLen40}\n      onSubmit={onSubmit}\n      captcha={captcha}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isLoggedIn: state.auth.isLoggedIn,\n  captcha: state.auth.captchaURL,\n});\n\nexport default compose(connect(mapStateToProps, { login }))(Login);\n","export const required = (message) => {\n  if (message) return undefined;\n  return 'field is required';\n};\n\nexport const maxLen = (len) => (message) => {\n  if (message && message.length > len)\n    return `maximum length is ${len}`;\n  return undefined;\n};\n"],"names":["LoginForm","handleSubmit","maxLen","captcha","className","src","alt","onSubmit","createField","Input","required","id","htmlFor","type","reduxForm","form","compose","connect","state","isLoggedIn","auth","captchaURL","login","to","maxLen40","email","password","rememberMe","message","len","length"],"sourceRoot":""}